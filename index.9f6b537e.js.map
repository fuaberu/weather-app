{"mappings":"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","sources":["scr/handleApi.js"],"sourcesContent":["// display\r\nconst displayCity = document.querySelector('.display-city');\r\nconst displayTime = document.querySelector('.display-time');\r\nconst currentTempreture = document.querySelector('.current-tempreture');\r\nconst maxMin = document.querySelector('.max-min');\r\nconst currentWeather = document.querySelector('.current-weather');\r\nconst currentIcon = document.querySelector('.current-icon');\r\n\r\n// days of the week\r\nconst todayDay = document.querySelectorAll('.day-week');\r\nconst todayDate = document.querySelectorAll('.date-of-the-day');\r\nconst todayDiscription = document.querySelectorAll('.today-discription');\r\nconst todayMaxMin = document.querySelectorAll('.today-max-min');\r\nconst weekdayIcon = document.querySelectorAll('.weekday-icon');\r\n\r\n// hours\r\nconst hour = document.querySelectorAll('.hour');\r\nconst hourTemp = document.querySelectorAll('.hour-temp');\r\nconst hourlyIcon = document.querySelectorAll('.hourly-icon');\r\n\r\n// general information\r\nconst probabPrecipitation = document.querySelector('#probab-precipitation');\r\nconst windDirection = document.querySelector('#wind');\r\nconst windValue = document.querySelector('#wind-value');\r\nconst humidity = document.querySelector('#humidity');\r\nconst uv = document.querySelector('#uv');\r\nconst visibility = document.querySelector('#visibility');\r\nconst feelsLike = document.querySelector('.feels-like');\r\n\r\n// main\r\nconst main = document.querySelector('.main');\r\n\r\n//loader\r\nconst loader = document.getElementById('loader');\r\n\r\n// form values\r\n\r\n// variables\r\n// global variables\r\nlet temperature = 'celsius';\r\nlet wind = 'km/h';\r\nlet visibilityCheck = 'km';\r\nlet timeCheck = '24h';\r\n\r\nlet currentLat = 0;\r\nlet currentLon = 0;\r\n\r\n//converter\r\nfunction cToF(value) {\r\n\treturn (value * 9) / 5 + 32;\r\n}\r\n//-------API fetch------//\r\n//get the weather data\r\nasync function getData(lat, lon) {\r\n\tloader.style.opacity = 1;\r\n\tloader.style.display = 'block';\r\n\tconsole.log('trying');\r\n\tcurrentLon = lon;\r\n\tcurrentLat = lat;\r\n\ttry {\r\n\t\tconst response = await fetch(\r\n\t\t\t`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely&units=metric&appid=ac42c7f77039422737761129cd9e34f8`,\r\n\t\t\t{ mode: 'cors' }\r\n\t\t);\r\n\t\tconst data = await response.json();\r\n\t\ttakeScroll();\r\n\t\tdisplayWeather(data);\r\n\t\tsetTimeout(() => {\r\n\t\t\tloader.style.opacity = 0;\r\n\t\t\tloader.style.display = 'none';\r\n\t\t}, 1000);\r\n\t} catch (error) {\r\n\t\talert('Sorry, there was an error on the weather data. Please try again later.');\r\n\t}\r\n}\r\n\r\n//get city name from geolocation\r\nasync function getCity(lat, lon) {\r\n\ttry {\r\n\t\tconst response = await fetch(\r\n\t\t\t`https://api.openweathermap.org/geo/1.0/reverse?lat=${lat}&lon=${lon}&limit=1&appid=ac42c7f77039422737761129cd9e34f8`,\r\n\t\t\t{ mode: 'cors' }\r\n\t\t);\r\n\t\tconst cityName = await response.json();\r\n\t\t//display the city name\r\n\t\tdisplayCity.innerText = `${cityName[0].name}, ${cityName[0].country}`;\r\n\t} catch (error) {\r\n\t\talert('Sorry, there was an error on the city name data. Please try again later.');\r\n\t}\r\n}\r\n\r\n// site load\r\ngetData(51.5098, -0.118);\r\n\r\n//-------functions------//\r\n// settings form data\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\tdocument.getElementById('settingsForm').addEventListener('submit', handleSettingsForm);\r\n\tdocument\r\n\t\t.getElementById('city-location-input')\r\n\t\t.addEventListener('submit', handleCityNameForm);\r\n});\r\n\r\n// settings input\r\nfunction handleSettingsForm(e) {\r\n\te.preventDefault(); //stop the page reloading\r\n\t//console.dir(ev.target);\r\n\tlet myForm = e.target;\r\n\tlet settingsData = new FormData(myForm);\r\n\tlet dataArray = [];\r\n\t// look at all the contents\r\n\tfor (let key of settingsData.keys()) {\r\n\t\tdataArray.push(settingsData.get(key));\r\n\t}\r\n\tconvertValue(dataArray);\r\n}\r\n\r\n// city name from city input form\r\nfunction handleCityNameForm(e) {\r\n\te.preventDefault(); //stop the page reloading\r\n\t//console.dir(ev.target);\r\n\tlet myForm = e.target;\r\n\tlet cityData = new FormData(myForm);\r\n\tlet dataName = '';\r\n\t// look at all the contents\r\n\tfor (let key of cityData.keys()) {\r\n\t\tdataName = cityData.get(key);\r\n\t}\r\n\tgetCityCoordinates(dataName);\r\n}\r\n\r\n// form settings data change\r\nfunction convertValue(value) {\r\n\ttemperature = value[0];\r\n\twind = value[1];\r\n\tvisibilityCheck = value[2];\r\n\ttimeCheck = value[3];\r\n}\r\n\r\n// form city name convert to geolocation\r\nasync function getCityCoordinates(city) {\r\n\tconst response = await fetch(\r\n\t\t`https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=ac42c7f77039422737761129cd9e34f8`,\r\n\t\t{ mode: 'cors' }\r\n\t);\r\n\tconst cityCoordinates = await response.json();\r\n\tconsole.log(cityCoordinates);\r\n\t//display the city name\r\n\ttakeScroll();\r\n\tgetData(cityCoordinates[0].lat, cityCoordinates[0].lon);\r\n}\r\n\r\n// icons function\r\nfunction icon(code, time, sunset, sunrise) {\r\n\tif (time > sunset || time < sunrise) {\r\n\t\treturn `wi-owm-night-${code}`;\r\n\t} else if (time < sunset && time > sunrise) {\r\n\t\treturn `wi-owm-day-${code}`;\r\n\t}\r\n}\r\n\r\n// get user current location\r\nfunction userLocation() {\r\n\tif (navigator.geolocation) {\r\n\t\tnavigator.geolocation.getCurrentPosition((position) => {\r\n\t\t\tgetData(position.coords.latitude, position.coords.longitude);\r\n\t\t});\r\n\t} else {\r\n\t\talert('Geolocation is not supported by this browser.');\r\n\t}\r\n}\r\n\r\n// convert time\r\nfunction convertTime(isoTime) {\r\n\tlet hours = parseInt(isoTime.substring(0, 2), 10);\r\n\tlet minutes = isoTime.substring(3, 5);\r\n\tlet ampm = 'AM';\r\n\r\n\tif (hours == 12) {\r\n\t\tampm = 'PM';\r\n\t} else if (hours == 0) {\r\n\t\thours = 12;\r\n\t} else if (hours > 12) {\r\n\t\thours -= 12;\r\n\t\tampm = 'PM';\r\n\t}\r\n\tif (minutes < 1) {\r\n\t\treturn hours + ' ' + ampm;\r\n\t}\r\n\treturn hours + ':' + minutes + ' ' + ampm;\r\n}\r\n\r\n// display current weather\r\nfunction displayCurrent(data) {\r\n\t//display icon\r\n\tcurrentIcon.classList.add(\r\n\t\ticon(\r\n\t\t\tdata.current.weather[0].id,\r\n\t\t\tdata.current.dt,\r\n\t\t\tdata.current.sunset,\r\n\t\t\tdata.current.sunrise\r\n\t\t)\r\n\t);\r\n\r\n\t//diaplay current temperature\r\n\tcurrentTempreture.innerText =\r\n\t\ttemperature === 'celsius'\r\n\t\t\t? ` ${Math.round(data.current.temp)}`\r\n\t\t\t: ` ${Math.round(cToF(data.current.temp))}`;\r\n\r\n\t//display current min and max temperature\r\n\tmaxMin.innerText = `${data.current.weather[0].main} ${Math.round(\r\n\t\ttemperature === 'celsius'\r\n\t\t\t? `${Math.round(data.daily[0].temp.max)}`\r\n\t\t\t: `${Math.round(cToF(data.daily[0].temp.max))}`\r\n\t)}\\xB0 / ${Math.round(\r\n\t\ttemperature === 'celsius'\r\n\t\t\t? `${Math.round(data.daily[0].temp.min)}`\r\n\t\t\t: `${Math.round(cToF(data.daily[0].temp.min))}`\r\n\t)}\\xB0`;\r\n}\r\n\r\n//-------display each day of the week------//\r\n\r\nfunction dayWeek(data) {\r\n\t//day of the week\r\n\tfor (let i = 0; i < todayDay.length; i++) {\r\n\t\tconst weekday = ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'];\r\n\t\tlet day = new Date().getDay();\r\n\t\ttodayDay[i].innerText =\r\n\t\t\ti === 0 ? 'Today' : weekday[day + i > 6 ? day + i - 7 : day + i];\r\n\t}\r\n\r\n\t//day date\r\n\tfor (let i = 0; i < todayDate.length; i++) {\r\n\t\tlet date = new Date().toString().slice(4, 10);\r\n\t\ttodayDate[i].innerText = date.slice(0, -2) + (parseInt(date.slice(-1)) + i);\r\n\t}\r\n\r\n\t//day discription\r\n\tfor (let i = 0; i < todayDiscription.length; i++) {\r\n\t\ttodayDiscription[i].innerText = data.daily[i].weather[0].description;\r\n\t}\r\n\r\n\t// scroll effect\r\n\tscrollDiscription();\r\n\r\n\t//day max min\r\n\tfor (let i = 0; i < todayMaxMin.length; i++) {\r\n\t\ttodayMaxMin[i].innerText = `${Math.round(\r\n\t\t\ttemperature === 'celsius' ? data.daily[i].temp.max : cToF(data.daily[i].temp.max)\r\n\t\t)}\\xB0 / ${Math.round(\r\n\t\t\ttemperature === 'celsius' ? data.daily[i].temp.min : cToF(data.daily[i].temp.min)\r\n\t\t)}\\xB0`;\r\n\t}\r\n\r\n\t//weekday icon\r\n\tfor (let i = 0; i < weekdayIcon.length; i++) {\r\n\t\tweekdayIcon[i].classList.add(\r\n\t\t\ticon(\r\n\t\t\t\tdata.daily[i].weather[0].id,\r\n\t\t\t\tdata.daily[i].dt,\r\n\t\t\t\tdata.daily[i].sunset,\r\n\t\t\t\tdata.daily[i].sunrise\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}\r\n\r\n//-------display hours------//\r\n\r\nfunction hourly(data) {\r\n\tconst now = new Date();\r\n\tconst utc = now.toISOString();\r\n\tconst utcTimeStamp = Date.parse(utc);\r\n\tconst cityTime = utcTimeStamp + data.timezone_offset * 1000;\r\n\r\n\tfor (let i = 0; i < hour.length; i++) {\r\n\t\tlet date = cityTime + i * 3600000;\r\n\t\tlet hourDisplay = new Date(date).toISOString().slice(11, -11);\r\n\t\thour[i].innerText = timeCheck === '12h' ? convertTime(hourDisplay) : hourDisplay;\r\n\t}\r\n\r\n\tfor (let i = 0; i < hourTemp.length; i++) {\r\n\t\thourTemp[i].innerText = `${Math.round(\r\n\t\t\ttemperature === 'celsius' ? data.hourly[i].temp : cToF(data.hourly[i].temp)\r\n\t\t)}\\xB0`;\r\n\t}\r\n\r\n\t// hour icon\r\n\tfor (let i = 0; i < hourlyIcon.length; i++) {\r\n\t\thourlyIcon[i].classList.add(\r\n\t\t\ticon(\r\n\t\t\t\tdata.hourly[i].weather[0].id,\r\n\t\t\t\tdata.hourly[i].dt,\r\n\t\t\t\tdata.current.sunset,\r\n\t\t\t\tdata.current.sunrise\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}\r\n\r\n//-------display general information------//\r\n\r\nfunction generalInformatio(data) {\r\n\t//Precipitation Probability\r\n\tprobabPrecipitation.innerText = Math.round(data.daily[0].pop * 100) + ' %';\r\n\r\n\t//display current feeling temperature\r\n\tfeelsLike.innerText = `${Math.round(\r\n\t\ttemperature === 'celsius' ? data.current.feels_like : cToF(data.current.feels_like)\r\n\t)}\\xB0`;\r\n\r\n\t//wind direction\r\n\tconst directionsArray = [\r\n\t\t'N',\r\n\t\t'NNE',\r\n\t\t'NE',\r\n\t\t'ENE',\r\n\t\t'E',\r\n\t\t'ESE',\r\n\t\t'SE',\r\n\t\t'SSE',\r\n\t\t'S',\r\n\t\t'SSW',\r\n\t\t'SW',\r\n\t\t'WSW',\r\n\t\t'W',\r\n\t\t'WNW',\r\n\t\t'NW',\r\n\t\t'NNW',\r\n\t\t'N',\r\n\t];\r\n\tconst angle = Math.round(0 / 22.5);\r\n\twindDirection.innerText = directionsArray[angle % 16];\r\n\r\n\t//wind Value\r\n\tfunction windConverter(value) {\r\n\t\tswitch (wind) {\r\n\t\t\tcase 'm/s':\r\n\t\t\t\twindValue.innerText = `${(value / 3.6).toFixed(2)}m/s`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ft/s':\r\n\t\t\t\twindValue.innerText = `${(value / 1.097).toFixed(2)} ft/s`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'mi/h':\r\n\t\t\t\twindValue.innerText = `${(value / 1.609).toFixed(2)} mi/h`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'kts':\r\n\t\t\t\twindValue.innerText = `${(value / 1.852).toFixed(2)} kts`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'km/h':\r\n\t\t\t\twindValue.innerText = `${value} km/h`;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\twindValue.innerText = `${value} km/h`;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\twindConverter(data.current.wind_speed);\r\n\r\n\t//humidity\r\n\thumidity.innerText = data.current.humidity + ' %';\r\n\r\n\t//uv\r\n\tconst uvIndex = [\r\n\t\t'Low',\r\n\t\t'Low',\r\n\t\t'Low',\r\n\t\t'Modarate',\r\n\t\t'Modarate',\r\n\t\t'Modarate',\r\n\t\t'High',\r\n\t\t'High',\r\n\t\t'Very High',\r\n\t\t'Very High',\r\n\t\t'Very High',\r\n\t\t'Extreme',\r\n\t\t'Extreme',\r\n\t\t'Extreme',\r\n\t\t'Extreme',\r\n\t\t'Extreme',\r\n\t];\r\n\r\n\tuv.innerText = uvIndex[Math.round(data.current.uvi)];\r\n\t//visibility\r\n\tvisibility.innerText =\r\n\t\tvisibilityCheck === 'km'\r\n\t\t\t? data.current.visibility > 1000\r\n\t\t\t\t? data.current.visibility / 1000 + ' km'\r\n\t\t\t\t: data.current.visibility + ' m'\r\n\t\t\t: Math.round(data.current.visibility / 1.609) + ' mi';\r\n}\r\n\r\n//-------display data in the ui------//\r\n\r\nfunction displayWeather(data) {\r\n\t// time\r\n\tconst now = new Date();\r\n\tconst utc = now.toISOString();\r\n\tconst utcTimeStamp = Date.parse(utc);\r\n\tconst cityTime = utcTimeStamp + data.timezone_offset * 1000;\r\n\r\n\t//-------display city name------//\r\n\tgetCity(data.lat, data.lon);\r\n\r\n\t//-------display current------//\r\n\r\n\t// update every 1 sec\r\n\tlet clockInterval = setInterval(() => {\r\n\t\t//display the time\r\n\t\tconst now = new Date();\r\n\t\tconst utc = now.toISOString();\r\n\t\tconst utcTimeStamp = Date.parse(utc);\r\n\t\tconst cityOffset = utcTimeStamp + data.timezone_offset * 1000;\r\n\t\tconst cityTimeUtc = new Date(cityOffset).toISOString();\r\n\t\tif (timeCheck === '12h') {\r\n\t\t\tdisplayTime.innerText = convertTime(cityTimeUtc.slice(11, -5));\r\n\t\t} else if (timeCheck === '24h') {\r\n\t\t\tdisplayTime.innerText = cityTimeUtc.slice(11, -8);\r\n\t\t}\r\n\t}, 1000);\r\n\r\n\tdisplayCurrent(data);\r\n\tdayWeek(data);\r\n\thourly(data, cityTime);\r\n\tgeneralInformatio(data);\r\n\r\n\t// stop interval\r\n\tfunction stopInterval() {\r\n\t\tclearInterval(clockInterval);\r\n\t}\r\n\r\n\t//-------Event Listener------//\r\n\tdocument.getElementById('my-location').addEventListener('click', () => {\r\n\t\tuserLocation();\r\n\t\tstopInterval();\r\n\t});\r\n\tdocument.getElementById('city-search-btn').addEventListener('click', () => {\r\n\t\tstopInterval();\r\n\t});\r\n\r\n\t// background color\r\n\tChangeBackground(\r\n\t\tdata.current.sunrise,\r\n\t\tdata.current.sunset,\r\n\t\tdata.current.weather[0].main,\r\n\t\tdata.current.dt,\r\n\t\tmain\r\n\t);\r\n}\r\n\r\nfunction update() {\r\n\tgetData(currentLat, currentLon);\r\n}\r\n"],"names":["displayCity","document","querySelector","displayTime","currentTempreture","maxMin","currentWeather","currentIcon","todayDay","querySelectorAll","todayDate","todayDiscription","todayMaxMin","weekdayIcon","hour","hourTemp","hourlyIcon","probabPrecipitation","windDirection","windValue","humidity","uv","visibility","feelsLike","main","loader","getElementById","temperature","wind","visibilityCheck","timeCheck","currentLat","currentLon","cToF","value","getData","lat","lon","style","opacity","display","console","log","response","fetch","mode","data","json","takeScroll","displayWeather","setTimeout","error","alert","getCity","cityName","innerText","name","country","handleSettingsForm","e","preventDefault","myForm","target","settingsData","FormData","dataArray","key","keys","push","get","convertValue","handleCityNameForm","cityData","dataName","getCityCoordinates","city","cityCoordinates","icon","code","time","sunset","sunrise","userLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","convertTime","isoTime","hours","parseInt","substring","minutes","ampm","displayCurrent","classList","add","current","weather","id","dt","Math","round","temp","daily","max","min","dayWeek","i","length","weekday","day","Date","getDay","i1","date","toString","slice","i2","description","scrollDiscription","i3","i4","hourly","utc","toISOString","cityTime","parse","timezone_offset","hourDisplay","generalInformatio","pop","feels_like","angle","toFixed","windConverter","wind_speed","uvi","clockInterval","setInterval","utc1","cityOffset","cityTimeUtc","stopInterval","clearInterval","addEventListener","ChangeBackground","update"],"version":3,"file":"index.9f6b537e.js.map"}