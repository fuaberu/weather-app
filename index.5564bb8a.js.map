{"mappings":"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","sources":["scr/handleApi.js"],"sourcesContent":["// display\r\nconst displayCity = document.querySelector('.display-city');\r\nconst displayTime = document.querySelector('.display-time');\r\nconst currentTempreture = document.querySelector('.current-tempreture');\r\nconst maxMin = document.querySelector('.max-min');\r\nconst currentWeather = document.querySelector('.current-weather');\r\nconst currentIcon = document.querySelector('.current-icon');\r\n\r\n// days of the week\r\nconst todayDay = document.querySelectorAll('.day-week');\r\nconst todayDate = document.querySelectorAll('.date-of-the-day');\r\nconst todayDiscription = document.querySelectorAll('.today-discription');\r\nconst todayMaxMin = document.querySelectorAll('.today-max-min');\r\nconst weekdayIcon = document.querySelectorAll('.weekday-icon');\r\n\r\n// hours\r\nconst hour = document.querySelectorAll('.hour');\r\nconst hourTemp = document.querySelectorAll('.hour-temp');\r\nconst hourlyIcon = document.querySelectorAll('.hourly-icon');\r\n\r\n// general information\r\nconst probabPrecipitation = document.querySelector('#probab-precipitation');\r\nconst volumePrecipitation = document.querySelector('#precipitation-volume');\r\nconst windDirection = document.querySelector('#wind');\r\nconst windValue = document.querySelector('#wind-value');\r\nconst humidity = document.querySelector('#humidity');\r\nconst uv = document.querySelector('#uv');\r\nconst visibility = document.querySelector('#visibility');\r\nconst feelsLike = document.querySelector('.feels-like');\r\n\r\n// variables\r\nlet isUserLocation = false;\r\n\r\n//-------API fetch------//\r\nasync function getData(lat, lon) {\r\n\tconst response = await fetch(\r\n\t\t`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely&units=metric&appid=ac42c7f77039422737761129cd9e34f8`,\r\n\t\t{ mode: 'cors' }\r\n\t);\r\n\tconst data = await response.json();\r\n\tdisplayWeather(data);\r\n\tconsole.log(data);\r\n}\r\n\r\n// site load\r\ngetData(51.5074, 0.1278);\r\n\r\n// functions\r\n// icons function\r\nfunction icon(code, time, sunset, sunrise) {\r\n\tif (time > sunset || time < sunrise) {\r\n\t\treturn `wi-owm-night-${code}`;\r\n\t} else if (time < sunset && time > sunrise) {\r\n\t\treturn `wi-owm-day-${code}`;\r\n\t}\r\n}\r\n\r\n// get user current location\r\nfunction userLocation() {\r\n\tisUserLocation = true;\r\n\tif (navigator.geolocation) {\r\n\t\tnavigator.geolocation.getCurrentPosition((position) => {\r\n\t\t\tgetData(position.coords.latitude, position.coords.longitude);\r\n\t\t});\r\n\t} else {\r\n\t\talert('Geolocation is not supported by this browser.');\r\n\t}\r\n}\r\n\r\n// convert time\r\nfunction convertTime(isoTime) {\r\n\tvar hours = parseInt(isoTime.substring(0, 2), 10),\r\n\t\tminutes = isoTime.substring(3, 5),\r\n\t\tampm = 'AM';\r\n\r\n\tif (hours == 12) {\r\n\t\tampm = 'PM';\r\n\t} else if (hours == 0) {\r\n\t\thours = 12;\r\n\t} else if (hours > 12) {\r\n\t\thours -= 12;\r\n\t\tampm = 'PM';\r\n\t}\r\n\r\n\treturn hours + ':' + minutes + ' ' + ampm;\r\n}\r\n\r\n//open and close forms\r\nfunction openPopup(id) {\r\n\tdocument.getElementById(id).style.display = 'block';\r\n}\r\n\r\nfunction closeForm(id) {\r\n\tdocument.getElementById(id).style.display = 'none';\r\n}\r\n\r\n//-------display data in the ui------//\r\n\r\nfunction displayWeather(data) {\r\n\t// city values\r\n\tconst now = new Date();\r\n\tconst utc = now.toISOString();\r\n\tconst utcTimeStamp = Date.parse(utc);\r\n\tconst cityTime = utcTimeStamp + data.timezone_offset * 1000;\r\n\r\n\t//-------display current------//\r\n\r\n\t//display the city name\r\n\t// displayCity.innerText =\r\n\r\n\t//display the time\r\n\tlet clockInterval = setInterval(() => {\r\n\t\tconst now = new Date();\r\n\t\tconst utc = now.toISOString();\r\n\t\tconst utcTimeStamp = Date.parse(utc);\r\n\t\tconst cityOffset = utcTimeStamp + data.timezone_offset * 1000;\r\n\t\tconst cityTimeUtc = new Date(cityOffset).toISOString();\r\n\t\tconsole.log(convertTime(cityTimeUtc.slice(11,-5)));\r\n\t\tdisplayTime.innerText = convertTime(cityTimeUtc.slice(11, -5));\r\n\t}, 1000);\r\n\r\n\t// stop interval\r\n\tfunction stopInterval() {\r\n\t\tclearInterval(clockInterval);\r\n\t}\r\n\r\n\t//display icon\r\n\tcurrentIcon.classList.add(\r\n\t\ticon(\r\n\t\t\tdata.current.weather[0].id,\r\n\t\t\tdata.current.dt,\r\n\t\t\tdata.current.sunset,\r\n\t\t\tdata.current.sunrise\r\n\t\t)\r\n\t);\r\n\r\n\t//diaplay current temperature\r\n\tcurrentTempreture.innerText = `${Math.round(data.current.temp)}\\xB0`;\r\n\r\n\t//display current min and max temperature\r\n\tmaxMin.innerText = `${data.current.weather[0].main} ${Math.round(\r\n\t\tdata.daily[0].temp.max\r\n\t)}\\xB0 / ${Math.round(data.daily[0].temp.min)}\\xB0`;\r\n\r\n\t//-------display each day of the week------//\r\n\r\n\t//day of the week\r\n\tfor (let i = 0; i < todayDay.length; i++) {\r\n\t\tconst weekday = [\r\n\t\t\t'Sunday',\r\n\t\t\t'Monday',\r\n\t\t\t'Tuesday',\r\n\t\t\t'Wednesday',\r\n\t\t\t'Thursday',\r\n\t\t\t'Friday',\r\n\t\t\t'Saturday',\r\n\t\t];\r\n\t\tlet day = new Date().getDay();\r\n\t\ttodayDay[i].innerText =\r\n\t\t\ti === 0 ? 'Today' : weekday[day + i > 6 ? day + i - 7 : day + i];\r\n\t}\r\n\r\n\t//day date\r\n\tfor (let i = 0; i < todayDate.length; i++) {\r\n\t\tlet date = new Date().toString().slice(4, 10);\r\n\t\ttodayDate[i].innerText = date.slice(0, -2) + (parseInt(date.slice(-1)) + i);\r\n\t}\r\n\r\n\t//day discription\r\n\tfor (let i = 0; i < todayDiscription.length; i++) {\r\n\t\ttodayDiscription[i].innerText = data.daily[i].weather[0].description;\r\n\t}\r\n\r\n\t//day max min\r\n\tfor (let i = 0; i < todayMaxMin.length; i++) {\r\n\t\ttodayMaxMin[i].innerText = `${Math.round(\r\n\t\t\tdata.daily[i].temp.max\r\n\t\t)}\\xB0 / ${Math.round(data.daily[i].temp.min)}\\xB0`;\r\n\t}\r\n\r\n\t//weekday icon\r\n\tfor (let i = 0; i < weekdayIcon.length; i++) {\r\n\t\tweekdayIcon[i].classList.add(\r\n\t\t\ticon(\r\n\t\t\t\tdata.daily[i].weather[0].id,\r\n\t\t\t\tdata.daily[i].dt,\r\n\t\t\t\tdata.daily[i].sunset,\r\n\t\t\t\tdata.daily[i].sunrise\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t//-------display hours------//\r\n\tfor (let i = 0; i < hour.length; i++) {\r\n\t\tlet date = cityTime + i * 3600000;\r\n\t\tlet hourDisplay = new Date(date).toISOString().slice(11, -11);\r\n\t\thour[i].innerText = hourDisplay;\r\n\t}\r\n\r\n\tfor (let i = 0; i < hourTemp.length; i++) {\r\n\t\thourTemp[i].innerText = `${Math.round(data.hourly[i].temp)}\\xB0`;\r\n\t}\r\n\r\n\t// hour icon\r\n\tfor (let i = 0; i < hourlyIcon.length; i++) {\r\n\t\thourlyIcon[i].classList.add(\r\n\t\t\ticon(\r\n\t\t\t\tdata.hourly[i].weather[0].id,\r\n\t\t\t\tdata.hourly[i].dt,\r\n\t\t\t\tdata.current.sunset,\r\n\t\t\t\tdata.current.sunrise\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t//-------display general information------//\r\n\t//Precipitation Probability\r\n\tprobabPrecipitation.innerText = Math.round(data.daily[0].pop * 100) + ' %';\r\n\r\n\t//display current feeling temperature\r\n\tfeelsLike.innerText = `${Math.round(data.current.feels_like)}\\xB0`;\r\n\r\n\t//wind direction\r\n\tconst directionsArray = [\r\n\t\t'N',\r\n\t\t'NNE',\r\n\t\t'NE',\r\n\t\t'ENE',\r\n\t\t'E',\r\n\t\t'ESE',\r\n\t\t'SE',\r\n\t\t'SSE',\r\n\t\t'S',\r\n\t\t'SSW',\r\n\t\t'SW',\r\n\t\t'WSW',\r\n\t\t'W',\r\n\t\t'WNW',\r\n\t\t'NW',\r\n\t\t'NNW',\r\n\t\t'N',\r\n\t];\r\n\tconst angle = Math.round(0 / 22.5);\r\n\twindDirection.innerText = directionsArray[angle % 16];\r\n\r\n\t//wind Value\r\n\twindValue.innerText = `${data.current.wind_speed} km/h`;\r\n\r\n\t//humidity\r\n\thumidity.innerText = data.current.humidity + ' %';\r\n\r\n\t//uv\r\n\tconst uvIndex = [\r\n\t\t'Low',\r\n\t\t'Low',\r\n\t\t'Low',\r\n\t\t'Modarate',\r\n\t\t'Modarate',\r\n\t\t'Modarate',\r\n\t\t'High',\r\n\t\t'High',\r\n\t\t'Very High',\r\n\t\t'Very High',\r\n\t\t'Very High',\r\n\t\t'Extreme',\r\n\t\t'Extreme',\r\n\t\t'Extreme',\r\n\t\t'Extreme',\r\n\t\t'Extreme',\r\n\t];\r\n\r\n\tuv.innerText = uvIndex[data.current.uvi];\r\n\t//visibility\r\n\tvisibility.innerText =\r\n\t\tdata.current.visibility > 1000\r\n\t\t\t? data.current.visibility / 1000 + ' km'\r\n\t\t\t: data.current.visibility + ' m';\r\n\r\n\t//-------Event Listener------//\r\n\tdocument.getElementById('my-location').addEventListener('click', () => {\r\n\t\tuserLocation();\r\n\t\tstopInterval();\r\n\t});\r\n}\r\n"],"names":["displayCity","document","querySelector","displayTime","currentTempreture","maxMin","currentWeather","currentIcon","todayDay","querySelectorAll","todayDate","todayDiscription","todayMaxMin","weekdayIcon","hour","hourTemp","hourlyIcon","probabPrecipitation","volumePrecipitation","windDirection","windValue","humidity","uv","visibility","feelsLike","isUserLocation","getData","lat","lon","response","fetch","mode","data","json","displayWeather","console","log","icon","code","time","sunset","sunrise","userLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","alert","convertTime","isoTime","hours","parseInt","substring","ampm","openPopup","id","getElementById","style","display","closeForm","utc","Date","toISOString","cityTime","parse","timezone_offset","clockInterval","setInterval","utc1","cityOffset","cityTimeUtc","slice","innerText","classList","add","current","weather","dt","Math","round","temp","main","daily","max","min","i","length","weekday","day","getDay","i1","date","toString","i2","description","i3","i4","i5","hourDisplay","i6","hourly","i7","pop","feels_like","angle","wind_speed","uvi","addEventListener","clearInterval"],"version":3,"file":"index.5564bb8a.js.map"}